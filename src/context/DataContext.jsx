import React, { createContext, useState, useEffect } from "react";
import { useContext } from "react";
import { db } from "../config";
import {
  query,
  collection,
  orderBy,
  onSnapshot,
  doc,
  getDoc,
  updateDoc,
  setDoc,
  addDoc,
  getDocs,
} from "firebase/firestore";
import { useAuth } from "./AuthContext";

export const DataContext = createContext();

export const DataProvider = (props) => {
  const [crowdfunds, setCrowdfunds] = useState([]);
  const [userInvestments, setUserInvestments] = useState([]);
  const [refetchInvestments, setRefetchInvestments] = useState(false);
  const [refetchCrowdfunds, setRefetchCrowdfunds] = useState(false);
  const { user } = useAuth();

  // load crowdfunds on page load or when refetchCrowdfunds is triggered
  useEffect(() => {
    const q = query(collection(db, "crowdFunds"), orderBy("createdAt", "desc"));
    const unsubscribe = onSnapshot(q, (QuerySnapshot) => {
      // update crowdfunds state
      setCrowdfunds(
        QuerySnapshot.docs.map((doc) => ({
          id: doc.id,
          ...doc.data(),
        }))
      );
    });
    // cleanup function
    return () => unsubscribe;
  }, [refetchCrowdfunds]);

  // find crowdfund by id from the crowdfunds array
  const findCrowdFundById = (id) => {
    //  get the doc with this id
    const doc = crowdfunds.find((doc) => doc.id === id);
    return doc;
  };

  // save invesment to users document
  const saveCrowdfund = async (data) => {
    // Get a reference to the "crowdFunds" collection
    const crowdFundsRef = collection(db, "crowdFunds");

    // Add a new document to the "crowdFunds" collection with autogenerated ID
    await addDoc(crowdFundsRef, {
      ...data,
      dueDate: new Date(data.dueDate),
      amountRaised: 0,
      createdAt: new Date(),
    });

    // Trigger useEffect to load the new crowdfund
    setRefetchCrowdfunds(true);
  };

  // save invesment to users document
  const saveInvestment = async ({ crowdfundId, amount }) => {
    const docRef = doc(db, "users", user.uid);
    const docSnap = await getDoc(docRef);

    // check if user has investments
    if (docSnap.exists()) {
      //  add new object to investments array
      await updateDoc(docRef, {
        investments: [
          ...docSnap.data().investments,
          { crowdfundId, amount, createdAt: new Date() },
        ],
      });
    } else {
      // create new investments array for user
      await setDoc(docRef, {
        investments: [{ crowdfundId, amount, createdAt: new Date() }],
      });
    }

    // update crowdfund document
    const crowdfundDocRef = doc(db, "crowdFunds", crowdfundId);
    const crowdfundDocSnap = await getDoc(crowdfundDocRef);
    if (crowdfundDocSnap.exists()) {
      // increment amountRaised
      await updateDoc(crowdfundDocRef, {
        amountRaised:
          Number(crowdfundDocSnap.data().amountRaised) + Number(amount),
      });
    }

    // update investments state
    setRefetchInvestments(true);
  };

  // get all investments in the users collection, get each document and check if the document.crowdfundId matches the id passed in
  const getInvestmentsByCrowdfundId = async (crowdfundId) => {
    const userInvestmentsRef = collection(db, "users");
    const querySnapshot = await getDocs(userInvestmentsRef);

    const matchingInvestments = [];

    querySnapshot.forEach((doc) => {
      const investments = doc.data().investments;
      if (investments) {
        investments.forEach((investment) => {
          if (investment.crowdfundId === crowdfundId) {
            matchingInvestments.push(investment);
          }
        });
      }
    });

    return matchingInvestments;
  };

  // load investments on page load
  useEffect(() => {
    (async () => {
      if (user && user.uid) {
        const docRef = doc(db, "users", user.uid);
        const docSnap = await getDoc(docRef);
        if (docSnap.exists()) {
          setUserInvestments(docSnap.data().investments);
        }
      }
    })();
  }, [user, refetchInvestments]);

  // return the context object with the state and functions
  const value = {
    crowdfunds,
    saveCrowdfund,
    findCrowdFundById,
    saveInvestment,
    userInvestments,
    getInvestmentsByCrowdfundId,
  };
  return (
    <DataContext.Provider value={value}>{props.children}</DataContext.Provider>
  );
};

// custom hook to use the context
export const useData = () => {
  const context = useContext(DataContext);
  if (context === undefined) {
    throw new Error("useData must be used within a DataProvider");
  }
  return context;
};
